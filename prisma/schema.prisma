// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id                   String                 @id @default(cuid())
  name                 String
  country              String?
  emailAddress         String                 @unique
  farmers              Farmers[]
  harvests             Harvests[]
  Warehouses           Warehouses[]
  reports              Reports[]
  ReportTrackingEvents ReportTrackingEvents[]
}

model Farmers {
  id                String       @id @default(cuid())
  fullName          String
  // gender          String
  phoneNumber       String?
  farmSize          Int
  province          String
  country           String
  crops             String
  quantityCanSupply Int
  // nationalId      FarmersNationalId?
  // profilePicture  FarmersProfilePictures?
  organization_id   String
  organization      Organization @relation(fields: [organization_id], references: [id])
  harvests          Harvests[]
}

// model FarmersNationalId {
//   id        String  @id @default(cuid())
//   farmer    Farmers @relation(fields: [farmersId], references: [id])
//   farmersId String  @unique
// }

// model FarmersProfilePictures {
//   id        String  @id @default(cuid())
//   farmer    Farmers @relation(fields: [farmersId], references: [id])
//   farmersId String  @unique
// }

model Harvests {
  id             String       @id @default(cuid())
  date           DateTime
  name           String
  crop           String
  size           Int
  inputsUsed     String
  unit           String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  Farmers        Farmers      @relation(fields: [farmersId], references: [id], onDelete: Cascade)
  farmersId      String
  reports        Reports[]
}

model Equipments {
  id             String   @id @default(cuid())
  name           String
  type           String?
  leased         Boolean
  dateAcquired   DateTime
  purchasePrice  String
  estimatedValue String?
  brand          String?
  status         String
}

model Warehouses {
  id             String       @id @default(cuid())
  name           String
  description    String
  maxCapacity    Int
  unit           String
  inventory      Inventory[]
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Inventory {
  id                    String     @id @default(cuid())
  name                  String
  // the type is things like seed, vaccine etc
  inventoryType         String
  inventoryUnit         String
  description           String?
  estimatedValuePerUnit String
  Warehouses            Warehouses @relation(fields: [warehousesId], references: [id])
  warehousesId          String
}

// so to be able to track the report across the supply chain, you can have another table say "report events"
// that will link to the reports table and it will contains the different events associated with tracking the reports

model Reports {
  id                   String                 @id @default(cuid())
  name                 String
  dateCreated          DateTime
  Harvests             Harvests               @relation(fields: [harvestsId], references: [id])
  harvestsId           String
  Organization         Organization?          @relation(fields: [organizationId], references: [id])
  organizationId       String
  ReportTrackingEvents ReportTrackingEvents[]
}

model ReportTrackingEvents {
  id             String       @id @default(cuid())
  eventName      String
  dateCreated    DateTime
  description    String
  reportId       String
  reports        Reports      @relation(fields: [reportId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}
