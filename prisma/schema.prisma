// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// this of this as your organization
model Project {
  id   String  @id @default(cuid())
  name String
  slug String  @unique
  logo String?

  plan              String  @default("free")
  stripeId          String? @unique // Stripe subscription ID
  billingCycleStart Int // day of the month when the billing cycle starts
  stripeConnectId   String? @unique // for Stripe Connect
  inviteCode        String? @unique

  usage        Int @default(0)
  usageLimit   Int @default(1000)
  aiUsage      Int @default(0)
  aiLimit      Int @default(10)
  linksUsage   Int @default(0)
  linksLimit   Int @default(25)
  domainsLimit Int @default(3)
  tagsLimit    Int @default(5)
  usersLimit   Int @default(1)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  usageLastChecked DateTime @default(now())

  farmers              Farmers[]
  harvests             Harvests[]
  Warehouses           Warehouses[]
  reports              Reports[]
  ReportTrackingEvents ReportTrackingEvents[]

  users      ProjectUsers[]
  invites    ProjectInvite[]
  sentEmails SentEmail[]

  customers Customer[]

  @@index(usageLastChecked(sort: Asc))
}

// this table is for members of org working on a certain project
model ProjectUsers {
  id        String   @id @default(cuid())
  role      Role     @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

enum Role {
  owner
  member
}

model Customer {
  id               String  @id @default(cuid())
  name             String?
  email            String?
  avatar           String?
  externalId       String?
  project          Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
  projectConnectId String?
  stripeCustomerId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, externalId])
  @@unique([projectConnectId, externalId])
  @@index(projectId)
  @@index(projectConnectId)
  @@index(externalId)
}

model ProjectInvite {
  email     String
  expires   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

model SentEmail {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([projectId])
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  // sessions      Session[]
  source           String?
  defaultWorkspace String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  ProjectUsers     ProjectUsers[]

  @@index(source)
  @@index(defaultWorkspace)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

model Organization {
  id                   String                 @id @default(cuid())
  name                 String
  country              String?
  emailAddress         String                 @unique
  farmers              Farmers[]
  harvests             Harvests[]
  Warehouses           Warehouses[]
  reports              Reports[]
  ReportTrackingEvents ReportTrackingEvents[]
}

model Farmers {
  id                String       @id @default(cuid())
  fullName          String
  // gender          String
  phoneNumber       String?
  farmSize          Int
  province          String
  country           String
  crops             String
  quantityCanSupply Int
  // nationalId      FarmersNationalId?
  // profilePicture  FarmersProfilePictures?
  organization_id   String
  organization      Organization @relation(fields: [organization_id], references: [id])
  harvests          Harvests[]
  Project           Project?     @relation(fields: [projectId], references: [id])
  projectId         String?
}

// model FarmersNationalId {
//   id        String  @id @default(cuid())
//   farmer    Farmers @relation(fields: [farmersId], references: [id])
//   farmersId String  @unique
// }

// model FarmersProfilePictures {
//   id        String  @id @default(cuid())
//   farmer    Farmers @relation(fields: [farmersId], references: [id])
//   farmersId String  @unique
// }

model Harvests {
  id              String       @id @default(cuid())
  date            DateTime
  name            String
  crop            String
  size            Int
  inputsUsed      String
  unit            String
  Organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  Farmers         Farmers      @relation(fields: [farmersId], references: [id], onDelete: Cascade)
  farmersId       String
  reports         Reports[]
  Project         Project?     @relation(fields: [projectId], references: [id])
  projectId       String?
}

model Equipments {
  id             String   @id @default(cuid())
  name           String
  type           String?
  leased         Boolean
  dateAcquired   DateTime
  purchasePrice  String
  estimatedValue String?
  brand          String?
  status         String
}

model Warehouses {
  id              String       @id @default(cuid())
  name            String
  description     String
  maxCapacity     Int
  unit            String
  inventory       Inventory[]
  Organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  Project         Project?     @relation(fields: [projectId], references: [id])
  projectId       String?
}

model Inventory {
  id                    String     @id @default(cuid())
  name                  String
  // the type is things like seed, vaccine etc
  inventoryType         String
  inventoryUnit         String
  description           String?
  estimatedValuePerUnit String
  Warehouses            Warehouses @relation(fields: [warehousesId], references: [id])
  warehousesId          String
}

// so to be able to track the report across the supply chain, you can have another table say "report events"
// that will link to the reports table and it will contains the different events associated with tracking the reports

model Reports {
  id                   String                 @id @default(cuid())
  name                 String
  dateCreated          DateTime
  finishedTracking     Boolean                @default(false)
  Harvests             Harvests               @relation(fields: [harvestsId], references: [id])
  harvestsId           String
  Organization         Organization           @relation(fields: [organization_id], references: [id])
  organization_id      String
  ReportTrackingEvents ReportTrackingEvents[]
  Project              Project?               @relation(fields: [projectId], references: [id])
  projectId            String?
}

model ReportTrackingEvents {
  id              String       @id @default(cuid())
  eventName       String
  dateCreated     DateTime
  description     String
  reportId        String
  reports         Reports      @relation(fields: [reportId], references: [id])
  Organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  Project         Project?     @relation(fields: [projectId], references: [id])
  projectId       String?
}
