CREATE TABLE
    IF NOT EXISTS "public"."Organization" (
        "id" bigint GENERATED BY DEFAULT AS identity PRIMARY KEY,
        "name" text NOT NULL,
        "country" text,
        "emailAddress" text UNIQUE NOT NULL,
        "account_id" uuid not null references "basejump"."accounts" (id)
    );

CREATE TABLE
    IF NOT EXISTS "public"."Farmers" (
        "id" bigint GENERATED BY DEFAULT AS identity PRIMARY KEY,
        "fullName" text NOT NULL,
        "phoneNumber" text,
        "farmSize" integer NOT NULL,
        "province" text NOT NULL,
        "country" text NOT NULL,
        "crops" text NOT NULL,
        "quantityCanSupply" integer NOT NULL,
        "organization_id" bigint NOT NULL,
        "account_id" uuid not null references "basejump"."accounts" (id),
        CONSTRAINT fk_organization FOREIGN KEY (organization_id) REFERENCES "public"."Organization" (id),
        -- timestamps are useful for auditing
        -- Basejump has some convenience functions defined below for automatically handling these
        "updated_at" timestamp
        with
            time zone,
            "created_at" timestamp
        with
            time zone,
            -- Useful for tracking who made changes to a record
            -- Basejump has some convenience functions defined below for automatically handling these
            "updated_by" uuid references auth.users (id),
            "created_by" uuid references auth.users (id)
    );

CREATE TABLE
    IF NOT EXISTS "public"."Harvests" (
        "id" bigint GENERATED BY DEFAULT AS identity PRIMARY KEY,
        "date" date NOT NULL,
        "name" text NOT NULL,
        "crop" text NOT NULL,
        "size" int NOT NULL,
        "inputsUsed" text NOT NULL,
        "unit" text NOT NULL,
        "organization_id" bigint NOT NULL,
        "farmers_id" bigint NOT NULL,
        "account_id" uuid not null references "basejump"."accounts" (id),
        "updated_at" timestamp
        with
            time zone,
            "created_at" timestamp
        with
            time zone,
            "updated_by" uuid references auth.users (id),
            "created_by" uuid references auth.users (id),
            CONSTRAINT fk_organization_harvests FOREIGN KEY (organization_id) REFERENCES "public"."Organization" (id),
            CONSTRAINT fk_farmers_harvests FOREIGN KEY (farmers_id) REFERENCES "public"."Farmers" (id) on DELETE CASCADE
    );

CREATE TABLE
    IF NOT EXISTS "public"."Reports" (
        "id" bigint GENERATED BY DEFAULT AS identity PRIMARY KEY,
        "name" text NOT NULL,
        "dateCreated" date NOT NULL,
        "finishedTracking" bool DEFAULT false,
        "harvests_id" bigint NOT NULL,
        "organization_id" bigint NOT NULL,
        "account_id" uuid not null references "basejump"."accounts" (id),
        "updated_at" timestamp
        with
            time zone,
            "created_at" timestamp
        with
            time zone,
            "updated_by" uuid references auth.users (id),
            "created_by" uuid references auth.users (id),
            CONSTRAINT fk_harvests_reports FOREIGN KEY (harvests_id) REFERENCES "public"."Harvests" (id),
            CONSTRAINT fk_organization_reports FOREIGN KEY (organization_id) REFERENCES "public"."Organization" (id)
    );

CREATE TABLE
    IF NOT EXISTS "public"."ReportTrackingEvents" (
        "id" bigint GENERATED BY DEFAULT AS identity PRIMARY KEY,
        "eventName" text NOT NULL,
        "dateCreated" date NOT NULL,
        "description" text NOT NULL,
        "report_id" bigint NOT NULL,
        "organization_id" bigint NOT NULL,
        "account_id" uuid not null references "basejump"."accounts" (id),
        "updated_at" timestamp
        with
            time zone,
            "created_at" timestamp
        with
            time zone,
            "updated_by" uuid references auth.users (id),
            "created_by" uuid references auth.users (id),
            CONSTRAINT fk_reports_reportTrackingEvents FOREIGN KEY (report_id) REFERENCES "public"."Reports" (id),
            CONSTRAINT fk_organization_reportTrackingEvents FOREIGN KEY (organization_id) REFERENCES "public"."Organization" (id)
    );

-- protect the timestamps by setting created_at and updated_at to be read-only and managed by a trigger
CREATE TRIGGER set_Farmers_timestamp BEFORE INSERT
OR
UPDATE ON "public"."Farmers" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_timestamps ();

CREATE TRIGGER set_Harvests_timestamp BEFORE INSERT
OR
UPDATE ON "public"."Harvests" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_timestamps ();

CREATE TRIGGER set_Reports_timestamp BEFORE INSERT
OR
UPDATE ON "public"."Reports" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_timestamps ();

CREATE TRIGGER set_ReportTrackingEvents_timestamp BEFORE INSERT
OR
UPDATE ON "public"."ReportTrackingEvents" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_timestamps ();

-- protect the updated_by and created_by columns by setting them to be read-only and managed by a trigger
CREATE TRIGGER set_Farmers_user_tracking BEFORE INSERT
OR
UPDATE ON "public"."Farmers" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_user_tracking ();

CREATE TRIGGER set_Harvests_user_tracking BEFORE INSERT
OR
UPDATE ON "public"."Harvests" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_user_tracking ();

CREATE TRIGGER set_Reports_user_tracking BEFORE INSERT
OR
UPDATE ON "public"."Reports" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_user_tracking ();

CREATE TRIGGER set_ReportTrackingEvents_user_tracking BEFORE INSERT
OR
UPDATE ON "public"."ReportTrackingEvents" FOR EACH ROW EXECUTE PROCEDURE basejump.trigger_set_user_tracking ();

-- Row level security, here is the important bit of the architecture where we restrict access to rows based on the org they belong to
ALTER TABLE "public"."Farmers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Harvests" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Reports" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ReportTrackingEvents" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Organization" ENABLE ROW LEVEL SECURITY;

-- policies for Create, all users should be able to create records that are owned
-- by the account they belong to
create policy "Account members can create Farmers" on "public"."Farmers" for insert to authenticated
with
    check (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can create Harvests" on "public"."Harvests" for insert to authenticated
with
    check (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can create Reports" on "public"."Reports" for insert to authenticated
with
    check (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can create Report Tracking Events" on "public"."ReportTrackingEvents" for insert to authenticated
with
    check (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can create Organization" on "public"."Organization" for insert to authenticated
with
    check (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

-- policies for Reading data, all account owners should be able to read records based 
-- on the account they belong to
create policy "Account members can read Farmers" on "public"."Farmers" for
select
    to authenticated using (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can read Harvests" on "public"."Harvests" for
select
    to authenticated using (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can read Reports" on "public"."Reports" for
select
    to authenticated using (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can read Reports Tracking Events" on "public"."ReportTrackingEvents" for
select
    to authenticated using (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

create policy "Account members can read Organization data" on "public"."Organization" for
select
    to authenticated using (
        (
            account_id IN (
                SELECT
                    basejump.get_accounts_with_role ()
            )
        )
    );

-- policies for updating records, all account members should be able to update records 
-- based on the account they belong to
create policy "Account members can update Farmers" on "public"."Farmers" for
update to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can update Harvests" on "public"."Harvests" for
update to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can update Reports" on "public"."Reports" for
update to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can update Report Tracking Events" on "public"."ReportTrackingEvents" for
update to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can update Organization info" on "public"."Organization" for
update to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

-- policies for deleting records, all account owners should be able to delete records
-- based on the account they belong to
create policy "Account members can delete Farmers" on "public"."Farmers" for delete to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can delete Harvests" on "public"."Harvests" for delete to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can delete Reports" on "public"."Reports" for delete to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can delete Report Tracking Events" on "public"."ReportTrackingEvents" for delete to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);

create policy "Account members can delete Organization" on "public"."Organization" for delete to authenticated using (
    (
        account_id IN (
            SELECT
                basejump.get_accounts_with_role ()
        )
    )
);